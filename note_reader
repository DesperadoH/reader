
key words:
  HTML5  Local Storage/Session Storage  Ajax  Promise  Web workers
  webgl css3

2-2扩展知识 

*单例模式
  var single = {
  		arrr_1 : '1',
  		func : function(){
  			console.log(1);
  		}
  }
方法 属性共用
不用多次实例化-创立新的对象-占用内存
例如在对象中定义一个属性img:'....' 是个base64字符串 10k以上


*实例化



3-2 核心技术分解
base64制作icon 减少请求 维护不方便

3-4 HTML5 API 概要

1.
webkit:
window.performance.timing 监控页面加载速度

传统的浏览器:
new Date().getTime(); 时间戳相减
只能监控页面下载开始到下载完成的时间，而怎么跟服务器连接，页面怎么卸载的等性能指标没法获取

2.=
window.localStorage.getItem();
window.localStorage.setItem(key,value);

ex:
window.localStorage.setItem('a','1');
window.localStorage.getItem('a');   // "1"

3.
webworks: JS单线程 ，要异步操作，非ui和dom操作给后台

// 引用一个文件并且必须是和当前域名同域的文件
var worker = new Worker('my.js');  

// worker执行完之后的回调
worker.onmessage = function(event){
	console.log("called back by worker\n");
}

创建一个新的 worker 线程，只能存放计算有关的代码，而不能是改变UI的代码
后台的计算线程，跟UI线程相独立

4.
传统的ajax
var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function(){
	// do sth
}
xhr.open(url, "GET", false);
xhr.send();
过去的话 url 只能是同域的 协议,域名

现在XMLHttpRequest升级为 level2 之后，在HTTP的response响应头header里面设置
header('Access-Control-Allow-Origin:*');
header('Access-Control-Allow-Origin:www.baidu.com,www.qq.com');





3-8 
触屏事件详解

顺序:
start
move
end

start 
click 点击时有了移动就不会触发click，原地点击才会触发click
move
end


start
move
end 
mousemove
mousedown
mouseup
click


3-10
移动端性能陷阱 硬件加速
减少避免repaint reflow 缓存数据
PC 时代：
pc端 百度页面 network 某个请求
Cache-Control 
ETag 
Expires
Last-Modified
以上总体目标是用http协议的 Response Headers来做一个缓存



HTML5 时代：

1. localStorage
localStorage只能存字符串 想存对象就序列化
localStorage.setItem('data_1', JSON.stringify({a:1}))

JSON.parse(localStorage.getItem('data_1')); // Object {a:1}

2. sessionStorage 
	存储过期时间是跟随会话的，网页关了就清零

3. indexedDB
	可以存更大量数据 并且可以给数据建立索引  做查询






